// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allows for user to type in search bar 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="searchContainer"
      >
        <div
          class="searchBarContainer"
        >
          <input
            class="searchBar"
            data-testid="searchBar"
            id="searchBar"
            placeholder="Search by name, type, or number!"
            type="text"
            value="A"
          />
        </div>
        <div
          class="carousel"
        >
          <div
            class="carousel carousel-slider"
            style="width: 100%;"
          >
            <button
              class="control-arrow control-prev control-disabled"
              type="button"
            />
            <div
              class="slider-wrapper axis-vertical"
            >
              <ul
                class="slider animated"
                style="transform: translate3d(0,0%,0); transition-duration: 350ms;"
              >
                <li
                  class="slide selected"
                >
                  <div />
                </li>
              </ul>
            </div>
            <button
              class="control-arrow control-next control-disabled"
              type="button"
            />
          </div>
        </div>
        <div />
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="searchContainer"
    >
      <div
        class="searchBarContainer"
      >
        <input
          class="searchBar"
          data-testid="searchBar"
          id="searchBar"
          placeholder="Search by name, type, or number!"
          type="text"
          value="A"
        />
      </div>
      <div
        class="carousel"
      >
        <div
          class="carousel carousel-slider"
          style="width: 100%;"
        >
          <button
            class="control-arrow control-prev control-disabled"
            type="button"
          />
          <div
            class="slider-wrapper axis-vertical"
          >
            <ul
              class="slider animated"
              style="transform: translate3d(0,0%,0); transition-duration: 350ms;"
            >
              <li
                class="slide selected"
              >
                <div />
              </li>
            </ul>
          </div>
          <button
            class="control-arrow control-next control-disabled"
            type="button"
          />
        </div>
      </div>
      <div />
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`renders without crashing 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="searchContainer"
      >
        <div
          class="searchBarContainer"
        >
          <input
            class="searchBar"
            data-testid="searchBar"
            id="searchBar"
            placeholder="Search by name, type, or number!"
            type="text"
            value=""
          />
        </div>
        <div
          class="carousel"
        >
          <div
            class="carousel carousel-slider"
            style="width: 100%;"
          >
            <button
              class="control-arrow control-prev control-disabled"
              type="button"
            />
            <div
              class="slider-wrapper axis-vertical"
            >
              <ul
                class="slider animated"
                style="transform: translate3d(0,0%,0); transition-duration: 350ms;"
              >
                <li
                  class="slide selected"
                >
                  <div />
                </li>
              </ul>
            </div>
            <button
              class="control-arrow control-next control-disabled"
              type="button"
            />
          </div>
        </div>
        <div />
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="searchContainer"
    >
      <div
        class="searchBarContainer"
      >
        <input
          class="searchBar"
          data-testid="searchBar"
          id="searchBar"
          placeholder="Search by name, type, or number!"
          type="text"
          value=""
        />
      </div>
      <div
        class="carousel"
      >
        <div
          class="carousel carousel-slider"
          style="width: 100%;"
        >
          <button
            class="control-arrow control-prev control-disabled"
            type="button"
          />
          <div
            class="slider-wrapper axis-vertical"
          >
            <ul
              class="slider animated"
              style="transform: translate3d(0,0%,0); transition-duration: 350ms;"
            >
              <li
                class="slide selected"
              >
                <div />
              </li>
            </ul>
          </div>
          <button
            class="control-arrow control-next control-disabled"
            type="button"
          />
        </div>
      </div>
      <div />
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`should start with empty search field 1`] = `
<div
  className="searchContainer"
>
  <div
    className="searchBarContainer"
  >
    <input
      className="searchBar"
      data-testid="searchBar"
      id="searchBar"
      onChange={[Function]}
      placeholder="Search by name, type, or number!"
      type="text"
      value=""
    />
  </div>
  <div
    className="carousel"
  >
    <div
      className="carousel carousel-slider"
      style={
        Object {
          "width": "100%",
        }
      }
    >
      <button
        className="control-arrow control-prev control-disabled"
        onClick={[Function]}
        type="button"
      />
      <div
        className="slider-wrapper axis-vertical"
        style={
          Object {
            "height": undefined,
          }
        }
      >
        <ul
          className="slider animated"
          onMouseDown={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
          style={
            Object {
              "MozTransform": "translate3d(0,0%,0)",
              "MozTransitionDuration": "350ms",
              "MsTransform": "translate3d(0,0%,0)",
              "MsTransitionDuration": "350ms",
              "OTransform": "translate3d(0,0%,0)",
              "OTransitionDuration": "350ms",
              "WebkitTransform": "translate3d(0,0%,0)",
              "WebkitTransitionDuration": "350ms",
              "height": undefined,
              "msTransform": "translate3d(0,0%,0)",
              "msTransitionDuration": "350ms",
              "transform": "translate3d(0,0%,0)",
              "transitionDuration": "350ms",
            }
          }
        >
          <li
            className="slide selected"
            onClick={[Function]}
          >
            <div />
          </li>
        </ul>
      </div>
      <button
        className="control-arrow control-next control-disabled"
        onClick={[Function]}
        type="button"
      />
    </div>
  </div>
  <div />
</div>
`;
